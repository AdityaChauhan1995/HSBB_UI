import React, { Component } from 'react';
import { NavLink } from 'react-router-dom';
import { Form, Grid, Input, Table, Pagination, Icon, Segment, Popup, Header, Button } from 'semantic-ui-react';
import { connect } from 'react-redux';
import { fetchOrders } from '../../redux/actions/order';
import { FAILED, DEFAULT, SUCCESS, FAILURE } from '../../helpers/constants'
import ReactTooltip from "react-tooltip";

const TableHeader = () => {

	return (
		<Table.Row >
			<Table.HeaderCell className='tableHeader' style={{ width: '50px' }}>S.No</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '100px' }}>Date Created</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '100px' }}>Order Id</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '100px' }}>BTU ID</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '130px' }}>Provider Name</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '110px' }}>Status</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '100px' }}>Appointment</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '230px' }}>Installation address</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '80px' }}>Area</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '120px' }}>Type</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '120px' }}>Package</Table.HeaderCell>
			<Table.HeaderCell className='tableHeader' style={{ width: '100px' }}>Action</Table.HeaderCell>
		</Table.Row>
	);
}


const TableRow = ({ Key, order, viewOrder, modifyOrder, cancelOrder }) => {


	return (
		<React.Fragment>

			<Table.Row >
				<Table.Cell >{Key + 1}</Table.Cell>
				<Table.Cell >{order.dateCreated}</Table.Cell>
				<Table.Cell >
					{order.orderId}
				</Table.Cell>
				<Table.Cell >{order.btuId}</Table.Cell>
				<Table.Cell >{order.providerName}</Table.Cell>
				<Table.Cell >{order.status}</Table.Cell>
				<Table.Cell >{order.appointment}</Table.Cell>
				<Table.Cell >{order.installationAddress}</Table.Cell>
				<Table.Cell >{order.area}</Table.Cell>
				<Table.Cell >{order.addressType}</Table.Cell>
				<Table.Cell >{order.package}</Table.Cell>
				<Table.Cell >
					<ReactTooltip id="view" placem="left" effect="solid">
						View Order
					</ReactTooltip>
					<ReactTooltip id="modify" place="right" effect="solid">
						Modify Order
					</ReactTooltip>
					<ReactTooltip id="cancel" place="left" effect="solid">
						Cancel Order
					</ReactTooltip>

					<Icon name='eye'
						size={'large'}
						style={{
							'color': 'green', 'cursor': 'pointer',
							paddingLeft: 3, paddingTop: 5
						}}
						data-tip data-for="view"
						onClick={() => viewOrder(order)}
					/>
					<Icon name='edit'
						size={'large'}
						style={{
							'color': 'blue', 'cursor': 'pointer',
							paddingLeft: 3, paddingTop: 5
						}}
						data-tip data-for="modify"
						onClick={() => modifyOrder(order)}
					/>
					<Icon name='remove'
						size={'large'}
						style={{
							'color': 'red', 'cursor': 'pointer',
							paddingLeft: 3, paddingTop: 5
						}}
						data-tip data-for="cancel"
						onClick={() => cancelOrder(order)}
					/>
				</Table.Cell>
			</Table.Row>
		</React.Fragment>
	);
}

class OrderSearch extends Component {


	constructor(props) {
		super(props);
		const { url } = this.props.match;
		let baseUrl = url.substring(0, url.lastIndexOf("/"));
		this.state = {
			open: false,
			boundaryRange: 1,
			siblingRange: 1,
			showEllipsis: true,
			showFirstAndLastNav: true,
			showPreviousAndNextNav: true,
			totalPages: 20,
			activePage: 1,
			firstindexOf: 0,
			lastIndexOf: 5,
			rowsPerPage: 5,
			currentOrderList: null,
			orderList: props.orderList,
			validateResult: {},
			loading: false,
			nextPageUrl: baseUrl + "/order/btu-installation?mode=",
		}
	}


	componentDidUpdate(prevProps) {

		if (prevProps.FETCH_ALL_ORDER_STATUS != SUCCESS && this.props.FETCH_ALL_ORDER_STATUS === SUCCESS) {

			this.setState({ orderList: this.props.orderList, loading: false });

		} else if (prevProps.FETCH_ALL_ORDER_STATUS != FAILED && this.props.FETCH_ALL_ORDER_STATUS === FAILED) {

			this.setState({ validateResult: { status: FAILURE, message: 'Error in receiving data ' }, loading: false })

		}

	}

	handlePaginationChange = (e, { activePage }) => {
		console.log(`active page is ${activePage}`);
		let { rowsPerPage } = this.state;
		let tempFirstindexOf = (activePage * rowsPerPage) - rowsPerPage;
		let tempLastIndexOf = activePage * rowsPerPage;

		this.setState({
			activePage: activePage,
			firstindexOf: tempFirstindexOf,
			lastIndexOf: tempLastIndexOf
		});
		//this.setState({ activePage })
	}

	searchOrder = () => {
		this.props.fetchOrders();
	}

	viewOrder = (order) => {
		let { nextPageUrl } = this.state;
		console.log(order);
		this.props.history.push(nextPageUrl + 'view&btuid=' + order.btuId);
	}
	modifyOrder = (order) => {
		let { nextPageUrl } = this.state;
		console.log(order);
		this.props.history.push(nextPageUrl + 'edit&btuid=' + order.btuId);
	}

	cancelOrder = (order) => {

	}

	next = () => {
		this.props.history.push(this.state.nextPageUrl);
	}


	render() {

		let { orderList, rowsPerPage, currentOrderList, firstindexOf, lastIndexOf,
			activePage,
			boundaryRange,
			siblingRange,
			showEllipsis,
			showFirstAndLastNav,
			showPreviousAndNextNav,
			totalPages,
			selectedAddress, open } = this.state;

		currentOrderList = orderList.slice(firstindexOf, lastIndexOf);

		return (
			<div className='container-2'>
				<Segment.Group horizontal style={{ background: '#050A30', color: 'white', padding: 0 }}>
					<Segment ></Segment>
					<Segment>
						<Input
							placeholder='BTU ID'
							name='btuID'
							onChange={this.handleChange}
							size='small'
							style={{ float: 'right' }}
						>
						</Input>
					</Segment>
					<Segment>
						<Input
							placeholder='Order Id'
							name='btuID'
							onChange={this.handleChange}
							size='small'
							style={{ float: 'left' }}>
						</Input>
						<Icon name='search'
							size={'large'}
							style={{ 'color': 'white', 'cursor': 'pointer', paddingLeft: 20, paddingTop: 5 }}
							onClick={this.searchOrder}
						/>
					</Segment>
				</Segment.Group>

				<Form size='tiny'>

					<Pagination
						activePage={activePage}
						boundaryRange={boundaryRange}
						onPageChange={this.handlePaginationChange}
						size='mini'
						siblingRange={siblingRange}
						totalPages={totalPages}
						// Heads up! All items are powered by shorthands, if you want to hide one of them, just pass `null` as value
						ellipsisItem={showEllipsis ? undefined : null}
						firstItem={showFirstAndLastNav ? undefined : null}
						lastItem={showFirstAndLastNav ? undefined : null}
						prevItem={showPreviousAndNextNav ? undefined : null}
						nextItem={showPreviousAndNextNav ? undefined : null}

					/>
					<div >

						<Table celled >
							<Table.Header>
								<TableHeader />
							</Table.Header>

							<Table.Body>
								{
									currentOrderList.map((order, key) => {
										return (<TableRow
											Key={key}
											order={order}
											viewOrder={this.viewOrder}
											modifyOrder={this.modifyOrder}
											cancelOrder={() => this.setState({ 'open': true })}
										/>)
									})
								}
							</Table.Body>


						</Table>
					</div>
				</Form>
			</div>
		);
	}
}


const mapStateToProps = (state) => {
	return {
		orderList: state.order.data.orderList,
		FETCH_ALL_ORDER_STATUS: state.order.meta.FETCH_ALL_ORDER_STATUS
	}
}


const mapDispatchToProps = {
	fetchOrders
}

export default connect(mapStateToProps, mapDispatchToProps)(OrderSearch);
