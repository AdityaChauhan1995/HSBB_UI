import axios from 'axios';
import config from '../../helpers/api-urls';
import mockData from './mockData';


const _addNewUser = (userDetail) => {
  return new Promise((resolve, reject) => {
    resolve({userDetail});
  })
}


export const addNewUser = (userDetail)=>{

	return{
		type:'ADD_USER',
		payload:_addNewUser(userDetail)
	}
}



const _fetchOrders = () => {
  return new Promise((resolve, reject) => {
    resolve(mockData.orderList);
  })
}

export const fetchOrders = () => {
  return {
    type: 'FETCH_ALL_ORDERS',
    payload: _fetchOrders()
  }
}


const _setCoverageCheckData = (selectedAddress) => {
  return new Promise((resolve, reject) => {
    resolve(selectedAddress);
  })
}

export const setCoverageCheckData = (selectedAddress) => {
  return {
    type: 'SET_COVERAGE_CHECK_DATA',
    payload: _setCoverageCheckData(selectedAddress)
  }
}

export const setOrdersData = (orderData) => {
	return dispatch => {
		dispatch({
			type: 'SET_ORDERS_DATA',
			payload: _setOrdersData(orderData)
		})

	}
}

const _setOrdersData = (orderData) => {
	return new Promise((resolve, reject) => {
		resolve({orderData});
	})
}

export const setAppointmentData = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return dispatch => {
		dispatch({
			type: 'SET_APPOINTMENT_DATA',
			payload: _setAppointmentData(shiftSelected,shiftFormattedDate,shiftDate)
		})

	}
}

const _setAppointmentData = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return new Promise((resolve, reject) => {
		resolve({shiftSelected,shiftFormattedDate,shiftDate});
	})
}

export const setAppointmentDataPrev = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return dispatch => {
		dispatch({
			type: 'SET_APPOINTMENT_DATA_PREV',
			payload: _setAppointmentDataPrev(shiftSelected,shiftFormattedDate,shiftDate)
		})

	}
}

const _setAppointmentDataPrev = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return new Promise((resolve, reject) => {
		resolve({shiftSelected,shiftFormattedDate,shiftDate});
	})
}