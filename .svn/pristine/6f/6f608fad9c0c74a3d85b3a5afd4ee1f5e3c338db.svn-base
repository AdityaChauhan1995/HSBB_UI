import axios from 'axios';
import config from '../../helpers/api-urls';
import mockData from './mockData';

const API_BASE = 'http://localhost:8080';
const FETCH_ALL_ORDERS_URL = () =>`${API_BASE}/orders`;
const FETCH_ORDER_URL = (orderId) =>`${API_BASE}/orders/${orderId}`;
const MODIFY_ORDER_URL = `${API_BASE}/orders`;
const CREATE_ORDER_URL = `${API_BASE}/orders`;
const FETCH_INST_ADDR_URL  = (streetName,postcode) =>`${API_BASE}/coverageCheck/${streetName}/${postcode}`; 


const _fetchAllOrders = () => {
//   return new Promise((resolve, reject) => {
//     resolve(mockData.orderList);
//   })
	return axios.get(FETCH_ALL_ORDERS_URL());
}

export const fetchAllOrders = () => {
  return {
    type: 'FETCH_ALL_ORDERS',
    payload: _fetchAllOrders()
  }
}

const _fetchOrder = (orderId) => {
	// return new Promise((resolve, reject) => {
	//   resolve(mockData.order);
	// })
	return axios.get(FETCH_ORDER_URL(orderId));
  }
  
  export const fetchOrder = (orderId) => {
	return {
	  type: 'FETCH_ORDER',
	  payload: _fetchOrder(orderId)
	}
  }

  const _modifyOrder = (order) => {
	// return new Promise((resolve, reject) => {
	//   resolve(mockData.cancelledOrder);
	// })
	console.log('MODIFY_ORDER_URL',MODIFY_ORDER_URL);
	return axios.put(MODIFY_ORDER_URL,order);
  }
  
  export const modifyOrder = (order) => {
	return {
	  type: 'MODIFY_ORDER',
	  payload: _modifyOrder(order)
	}
  }


const _setCoverageCheckData = (selectedAddress) => {
  return new Promise((resolve, reject) => {
    resolve(selectedAddress);
  })
}

export const setCoverageCheckData = (selectedAddress) => {
  return {
    type: 'SET_COVERAGE_CHECK_DATA',
    payload: _setCoverageCheckData(selectedAddress)
  }
}

export const setOrdersData = (orderData) => {
	return dispatch => {
		dispatch({
			type: 'SET_ORDERS_DATA',
			payload: _setOrdersData(orderData)
		})

	}
}

const _setOrdersData = (orderData) => {
	return new Promise((resolve, reject) => {
		resolve({orderData});
	})
}

export const setAppointmentData = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return dispatch => {
		dispatch({
			type: 'SET_APPOINTMENT_DATA',
			payload: _setAppointmentData(shiftSelected,shiftFormattedDate,shiftDate)
		})

	}
}

const _setAppointmentData = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return new Promise((resolve, reject) => {
		resolve({shiftSelected,shiftFormattedDate,shiftDate});
	})
}

export const setAppointmentDataPrev = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return dispatch => {
		dispatch({
			type: 'SET_APPOINTMENT_DATA_PREV',
			payload: _setAppointmentDataPrev(shiftSelected,shiftFormattedDate,shiftDate)
		})

	}
}

const _setAppointmentDataPrev = (shiftSelected,shiftFormattedDate,shiftDate) => {
	return new Promise((resolve, reject) => {
		resolve({shiftSelected,shiftFormattedDate,shiftDate});
	})
}

const _createOrder = (order) => {
	// return new Promise((resolve, reject) => {
	//   resolve(mockData.cancelledOrder);
	// })
	console.log('CREATE_ORDER_URL ',CREATE_ORDER_URL);
	return axios.post(CREATE_ORDER_URL,order);
  }
  
  export const createOrder = (order) => {
	return {
	  type: 'CREATE_ORDER',
	  payload: _createOrder(order)
	}
  }


const _fetchInstallationAddresses = (searchCriteria) => {
//   return new Promise((resolve, reject) => {
//     resolve(mockData.addressList);
//   })
	return axios.get(FETCH_INST_ADDR_URL(searchCriteria.streetBuildName,searchCriteria.postCode));
}

export const fetchInstallationAddresses = (searchCriteria) => {


  return dispatch => {
    dispatch({
      type: 'FETCH_INST_ADDR',
      payload: _fetchInstallationAddresses(searchCriteria)
    });
  }
}
